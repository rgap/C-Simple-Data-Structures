Lista Circular
"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#include<iostream.h> 
#include <stdio.h>
#include <stdlib.h>

typedef struct lista LE;
typedef struct nodo_lista NO;

struct nodo_lista
{
   int elem;
   NO *prox; /* guarda la posicion del proximo elemento en la lista */
   NO *ante; /* guarda la posicion del elemento anterior en la lista */
};

struct lista
{
    NO *head ; /* guarda la dirección del primer elemento de la lista */
};

LE *Inicia_Lista(void) 
{ 
  LE *temp; 

  if ((temp = (LE *) malloc(sizeof(LE))) != NULL) 
  {
    if ((temp = (LE *) malloc(sizeof(LE))) != NULL) 
    {  
       if ((temp = (LE *) malloc(sizeof(LE))) != NULL) 
       {         
            temp->head = NULL; 
            return(temp); 
       }
    }
  } 
  else 
    exit(0); 
} 


void Inserta_Elemento(LE *L, int A)
{
    NO *aux,*ant,*atu;

    if ((aux = (NO *) malloc(sizeof(NO))) != NULL)
    {
        aux->elem = A;
        if (L->head == NULL)
        {
            aux->prox = aux;
            aux->ante = aux;
            L->head = aux;
        }
        else
        { /* Inserta en la pos. anterior de head */
            aux->prox = L->head;
            aux->ante = L->head->ante;
            L->head->ante->prox = aux;
            L->head->ante = aux;
        }
    }
    else
        exit(0);
    return;
}

int Eliminar_Elemento(LE *L,int A){
    
  NO *aux,*ant,*atu;
  
  if ((aux = (NO *) malloc(sizeof(NO))) != NULL) 
  { 
      if(L->head == NULL){
         return -1;
      }     
      else{
           atu=L->head;
           
           if(atu->elem==A){
              L->head = atu-> prox;
              return 1;
           }

           while (atu != NULL) 
           { 
             if(atu->elem==A){
                ant->prox=atu->prox;
                atu->prox=NULL;
                free(atu);
                return 1;
             }
             else{
                ant=atu;
                atu=atu->prox;
             }
           }  
           return -1;
      } 
          
  }
}

void Imprime_Lista(LE *L){

  NO *aux,*atu; 
     
  if ((aux = (NO *) malloc(sizeof(NO))) != NULL) 
  {      
      atu = L->head; 
      
      while (atu != NULL) 
      { 

        cout<<atu->elem<<" ";
        atu = atu->prox; 
        
      } 

   }
} 

  
/* Ejercicios: Implementar las funciones que faltan */ 
  
main() 
{ 
  system("TITLE Lista Circular");
  
  int aux_l;  
  LE *l; 
  int x=0; 
  char opc; 
  
  l = (LE *) Inicia_Lista(); 
  
  while (1) 
  { 
    cout<<"\n Insertar (i) Eliminar (e) Imprimir (p) Sair (s) "; 
    cin>>opc;

    if (opc == 'i') 
    { 
      cout<<"\n Ingrese el nuevo elemento entero "; 
      cin>>x;
      Inserta_Elemento(l,x);      
    } 

    if (opc == 'e') 
    { 
      cout<<"\n Ingrese el número entero a buscar "; 
      cin>>x; 
      aux_l = Eliminar_Elemento(l,x);     
      if (aux_l == -1) 
        cout<<"Numero no encontrado\n"; 
    } 

    if (opc == 'p') 
      Imprime_Lista(l); 

    if (opc == 's') 
    { 
      //l = (LE *) Vacia_Lista(l); 
      exit(0); 
    } 
  } 
}

PilaDinamica
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

typedef struct Pila    PL;
typedef struct Nodo_pila NO ;

struct Nodo_pila
{
  int elem;
  NO *prox;
}

struct Pila
{
  NO *top;
}

/* Ejercicio: Implementar las operaciones PUSH y POP */

ColaDinamica
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

typedef struct Cola    FL;
typedef struct Nodo_cola NO;

struct Nodo_cola
{
  int elem;
  NO *prox;
}

struct Cola
{
  NO *ini;
  NO *fim;
}

/* Ejercicio: Implementar las operaciones de inserción y eliminación */

Pila Estatica
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#include <stdlib.h>
#include <stdio.h>
#include <iostream.h>

typedef struct Pila PL;

struct Pila
{
    int top ;
    int max ; /* Almacena el tamaño máx.de la pila */
    int *elem; 
};

PL *Inicia_Pila(int N) 
{ 
  PL *temp; 
  int i   ; 
  
  if ((temp = (PL *) malloc(sizeof(PL))) != NULL) 
  { 
    if((temp->elem = (int *) malloc(sizeof(PL))) != NULL)
    {  
       temp->max = N; 
       temp->elem[0]=NULL;
                 
       temp->top = -1; /* lista vacia */ 
     return(temp); 
    }
    else
      exit(0);
  } 
  else 
    exit(0); 
} 

void Imprime_Pila(PL *P) 
{ 
  int i; 
  
  i = P->top; 
  cout<<"\n Elementos "<<endl; 
  while (i != -1) 
  { 
    cout<<"    "<<P->elem[i]<<endl; 
    i--;
  } 
} 

void PUSH(PL *P,int A)
{
    if (P->top < P->max - 1)
        P->elem[++(P->top)] = A;
    else
        printf("Pila llena\n");
}

int POP(PL*P)
{
    if(P->top>=0){
       free(P->elem);
       return(P->elem[(P->top)--]);
    }
    else
       return -1;
}

/* Implementar las otras operaciones */

main() 
{  
  system("TITLE Pila");
  
  PL *P; 
  int N,aux_l,x; 
  char opc; 
  
  cout<<"Ingrese el num. max. elem. en la Pila\n"; 
  cin>>N; 
  
  P = (PL *) Inicia_Pila(N); 
  
  while (1) 
  { 
    cout<<"\n PUSH (u) POP (o) Imprimir (p) Salir (s) "; 
    cin>>opc;

    if (opc == 'u') 
    { 
      cout<<"\n Ingrese el nuevo elemento entero "; 
      cin>>x;
      PUSH(P,x);      
    } 

    if (opc == 'o') 
    { 
      aux_l = POP(P);  
      if(aux_l==-1)
       cout<<"\n La Pila esta vacia";
    } 

    if (opc == 'p') 
      Imprime_Pila(P); 

    if (opc == 's') 
    { 
      //l = (LE *) Vacia_Lista(l); 
      exit(0); 
    } 
  } 
}
